name: ü§ñ Automated PrisMind Collection

on:
  schedule:
    # Run every 6 hours (4 times per day)
    - cron: '0 */6 * * *'
  
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      force_full_collection:
        description: 'Force full collection (ignore existing posts)'
        required: false
        default: false
        type: boolean

jobs:
  automated-collection:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    steps:
    - name: üîÑ Checkout Repository
      uses: actions/checkout@v4
    
    - name: üêç Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: üì¶ Install Dependencies
      run: |
        pip install -r requirements.txt
        # Install Playwright browsers for web scraping
        playwright install chromium
        # Install system dependencies for Playwright
        playwright install-deps chromium
    
    - name: üîê Set up Environment Variables
      env:
        REDDIT_CLIENT_ID: ${{ secrets.REDDIT_CLIENT_ID }}
        REDDIT_CLIENT_SECRET: ${{ secrets.REDDIT_CLIENT_SECRET }}
        REDDIT_USERNAME: ${{ secrets.REDDIT_USERNAME }}
        REDDIT_PASSWORD: ${{ secrets.REDDIT_PASSWORD }}
        REDDIT_ACCESS_TOKEN: ${{ secrets.REDDIT_ACCESS_TOKEN }}
        REDDIT_REFRESH_TOKEN: ${{ secrets.REDDIT_REFRESH_TOKEN }}
        REDDIT_USER_AGENT: ${{ secrets.REDDIT_USER_AGENT }}
        TWITTER_USERNAME: ${{ secrets.TWITTER_USERNAME }}
        TWITTER_PASSWORD: ${{ secrets.TWITTER_PASSWORD }}
        TWITTER_COOKIES: ${{ secrets.TWITTER_COOKIES }}
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        MISTRAL_API_KEY: ${{ secrets.MISTRAL_API_KEY }}
      run: |
        echo "üîê Environment variables set"
    
    - name: ü§ñ Run Automated Collection
      env:
        REDDIT_CLIENT_ID: ${{ secrets.REDDIT_CLIENT_ID }}
        REDDIT_CLIENT_SECRET: ${{ secrets.REDDIT_CLIENT_SECRET }}
        REDDIT_USERNAME: ${{ secrets.REDDIT_USERNAME }}
        REDDIT_PASSWORD: ${{ secrets.REDDIT_PASSWORD }}
        REDDIT_ACCESS_TOKEN: ${{ secrets.REDDIT_ACCESS_TOKEN }}
        REDDIT_REFRESH_TOKEN: ${{ secrets.REDDIT_REFRESH_TOKEN }}
        REDDIT_USER_AGENT: ${{ secrets.REDDIT_USER_AGENT }}
        TWITTER_USERNAME: ${{ secrets.TWITTER_USERNAME }}
        TWITTER_PASSWORD: ${{ secrets.TWITTER_PASSWORD }}
        TWITTER_COOKIES: ${{ secrets.TWITTER_COOKIES }}
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        MISTRAL_API_KEY: ${{ secrets.MISTRAL_API_KEY }}
      run: |
        echo "ü§ñ Starting automated collection..."
        
        # Run collection with timeout
        timeout 30m python -c "
import os
import sys
sys.path.append('.')

print('ü§ñ AUTOMATED COLLECTION STARTED')
print('=' * 50)

try:
    from services.collector_runner import collect_reddit_bookmarks, collect_twitter_bookmarks_synctter_bookmarks_sync
    from scripts.database_manager import DatabaseManager
    
    db_manager = DatabaseManager()
    
    # Collect Reddit bookmarks
    print('üî¥ Collecting Reddit bookmarks...')
    reddit_result = collect_reddit_bookmarks(db_manager, set(), set())
    print(f'‚úÖ Reddit collection: {reddit_result} posts')
    
    # Collect Twitter bookmarks
    print('üê¶ Collecting Twitter bookmarks...')
    twitter_result = collect_twitter_bookmarks_synctter_bookmarks_sync(db_manager, set(), set())
    print(f'‚úÖ Twitter collection: {twitter_result} posts')
    
    print('‚úÖ Collection completed successfully!')
    
except Exception as e:
    print(f'‚ùå Collection failed: {e}')
    import traceback
    traceback.print_exc()
    sys.exit(1)
" || echo "‚ö†Ô∏è Collection timed out or failed"
        
        echo "‚úÖ Automated collection completed!"
    
    - name: üìä Send Telegram Notification
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
      run: |
        echo "üì± Sending Telegram notification..."
        
        python -c "
import requests
import os
from supabase import create_client, Client

# Send heartbeat notification
bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
chat_id = os.getenv('TELEGRAM_CHAT_ID')

message = '''ü§ñ Automated Collection Complete!

‚úÖ Collection system is working
üìä Check your database for new posts
üîÑ Next run in 6 hours

System Status: OPERATIONAL'''

url = f'https://api.telegram.org/bot{bot_token}/sendMessage'
data = {'chat_id': chat_id, 'text': message}

try:
    response = requests.post(url, data=data)
    if response.status_code == 200:
        print('‚úÖ Telegram notification sent!')
    else:
        print(f'‚ùå Failed to send notification: {response.status_code}')
except Exception as e:
    print(f'‚ùå Error sending notification: {e}')
"
        
        echo "üì± Notification sent!"