name: ü§ñ Automated PrisMind Collection

on:
  schedule:
    - cron: '0 */6 * * *'
  workflow_dispatch:

jobs:
  automated-collection:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    steps:
    - name: üîÑ Checkout Repository
      uses: actions/checkout@v4
    
    - name: üêç Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: üì¶ Install Dependencies
      run: |
        pip install -r requirements.txt
        playwright install chromium
        playwright install-deps chromium
    
    - name: ü§ñ Run Collection
      env:
        REDDIT_CLIENT_ID: ${{ secrets.REDDIT_CLIENT_ID }}
        REDDIT_CLIENT_SECRET: ${{ secrets.REDDIT_CLIENT_SECRET }}
        REDDIT_USERNAME: ${{ secrets.REDDIT_USERNAME }}
        REDDIT_PASSWORD: ${{ secrets.REDDIT_PASSWORD }}
        REDDIT_ACCESS_TOKEN: ${{ secrets.REDDIT_ACCESS_TOKEN }}
        REDDIT_REFRESH_TOKEN: ${{ secrets.REDDIT_REFRESH_TOKEN }}
        REDDIT_USER_AGENT: ${{ secrets.REDDIT_USER_AGENT }}
        TWITTER_USERNAME: ${{ secrets.TWITTER_USERNAME }}
        TWITTER_PASSWORD: ${{ secrets.TWITTER_PASSWORD }}
        TWITTER_COOKIES: ${{ secrets.TWITTER_COOKIES }}
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        MISTRAL_API_KEY: ${{ secrets.MISTRAL_API_KEY }}
      run: |
        echo "ü§ñ Starting collection..."
        python -c "
        import os
        import sys
        sys.path.append('.')
        
        print('ü§ñ AUTOMATED COLLECTION STARTED')
        print('=' * 50)
        
        try:
            from services.collector_runner import collect_reddit_bookmarks, collect_twitter_bookmarks_sync
            from scripts.database_manager import DatabaseManager
            
            db_manager = DatabaseManager()
            
            print('üî¥ Collecting Reddit bookmarks...')
            reddit_result = collect_reddit_bookmarks(db_manager, set(), set())
            print(f'‚úÖ Reddit collection: {reddit_result} posts')
            
            print('üê¶ Collecting Twitter bookmarks...')
            twitter_result = collect_twitter_bookmarks_sync(db_manager, set(), set())
            print(f'‚úÖ Twitter collection: {twitter_result} posts')
            
            print('‚úÖ Collection completed successfully!')
            
        except Exception as e:
            print(f'‚ùå Collection failed: {e}')
            import traceback
            traceback.print_exc()
            sys.exit(1)
        "
    
    - name: üì± Send Notification
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      run: |
        echo "üì± Sending notification..."
        python -c "
        import requests
        import os
        
        bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        chat_id = os.getenv('TELEGRAM_CHAT_ID')
        
        message = 'ü§ñ Automated Collection Complete! Your new bookmarks have been collected and processed.'
        
        url = f'https://api.telegram.org/bot{bot_token}/sendMessage'
        data = {'chat_id': chat_id, 'text': message}
        
        try:
            response = requests.post(url, data=data)
            if response.status_code == 200:
                print('‚úÖ Telegram notification sent!')
            else:
                print(f'‚ùå Failed to send notification: {response.status_code}')
        except Exception as e:
            print(f'‚ùå Error sending notification: {e}')
        "