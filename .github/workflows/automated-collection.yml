name: 🤖 Automated PrisMind Collection

on:
  schedule:
    - cron: '0 */6 * * *'
  workflow_dispatch:

jobs:
  automated-collection:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    steps:
    - name: 🔄 Checkout Repository
      uses: actions/checkout@v4
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: 📦 Install Dependencies
      run: |
        pip install -r requirements.txt
        playwright install chromium
        playwright install-deps chromium
        echo "🔧 Ensured Playwright runtime installed"
    
    - name: 🗝️ Prepare Cookies (if provided)
      run: |
        mkdir -p cookies
        set -e
        REDDIT_LEN=${#REDDIT_COOKIES_JSON}
        TWITTER_LEN=${#TWITTER_COOKIES_JSON}
        echo "🔎 Secrets length -> reddit: ${REDDIT_LEN}, twitter: ${TWITTER_LEN}"
        if [ -n "${{ secrets.REDDIT_COOKIES_JSON }}" ]; then
          echo "${{ secrets.REDDIT_COOKIES_JSON }}" > cookies/reddit.json
          echo "✅ Wrote reddit cookies ($(wc -c < cookies/reddit.json) bytes)"
          head -c 120 cookies/reddit.json | tr -d '\n' || true; echo " ..."
        else
          echo "❌ Missing REDDIT_COOKIES_JSON"; exit 1
        fi
        if [ -n "${{ secrets.TWITTER_COOKIES_JSON }}" ]; then
          echo "${{ secrets.TWITTER_COOKIES_JSON }}" > cookies/twitter.json
          echo "✅ Wrote twitter cookies ($(wc -c < cookies/twitter.json) bytes)"
          head -c 120 cookies/twitter.json | tr -d '\n' || true; echo " ..."
        else
          echo "❌ Missing TWITTER_COOKIES_JSON"; exit 1
        fi

    - name: 🤖 Run Cookie-based Collection (Reddit/Twitter)
      env:
        REDDIT_USERNAME: ${{ secrets.REDDIT_USERNAME }}
      run: |
        echo "🤖 Starting cookie-based collection..."
        python scripts/cookie_collectors.py || true

    - name: 🤖 Run API-based Collection (Fallback)
      env:
        REDDIT_CLIENT_ID: ${{ secrets.REDDIT_CLIENT_ID }}
        REDDIT_CLIENT_SECRET: ${{ secrets.REDDIT_CLIENT_SECRET }}
        REDDIT_USERNAME: ${{ secrets.REDDIT_USERNAME }}
        REDDIT_PASSWORD: ${{ secrets.REDDIT_PASSWORD }}
        REDDIT_ACCESS_TOKEN: ${{ secrets.REDDIT_ACCESS_TOKEN }}
        REDDIT_REFRESH_TOKEN: ${{ secrets.REDDIT_REFRESH_TOKEN }}
        REDDIT_USER_AGENT: ${{ secrets.REDDIT_USER_AGENT }}
        TWITTER_USERNAME: ${{ secrets.TWITTER_USERNAME }}
        TWITTER_PASSWORD: ${{ secrets.TWITTER_PASSWORD }}
        TWITTER_COOKIES: ${{ secrets.TWITTER_COOKIES }}
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        MISTRAL_API_KEY: ${{ secrets.MISTRAL_API_KEY }}
      run: |
        echo "🤖 Starting REAL bookmark collection..."
        python -c "
        import os
        import sys
        sys.path.append('.')
        
        print('🤖 REAL BOOKMARK COLLECTION STARTED')
        print('=' * 50)
        
        try:
            from services.collector_runner import collect_reddit_bookmarks, collect_twitter_bookmarks_sync
            from scripts.database_manager import DatabaseManager
            
            db_manager = DatabaseManager()
            
            print('🔴 Collecting Reddit bookmarks (fallback API)...')
            try:
                reddit_result = collect_reddit_bookmarks(db_manager, set(), set())
            except Exception as _e:
                reddit_result = 0
                print(f'⚠️ Reddit API fallback failed: {_e}')
            print(f'✅ Reddit API fallback: {reddit_result} posts')
            
            print('🐦 Collecting Twitter bookmarks (fallback API)...')
            try:
                twitter_result = collect_twitter_bookmarks_sync(db_manager, set(), set())
            except Exception as _e:
                twitter_result = 0
                print(f'⚠️ Twitter API fallback failed: {_e}')
            print(f'✅ Twitter API fallback: {twitter_result} posts')
            
            print('✅ Collection completed successfully!')
            
        except Exception as e:
            print(f'❌ Collection failed: {e}')
            import traceback
            traceback.print_exc()
            sys.exit(1)
        "
    
    - name: 📱 Send Notification
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      run: |
        echo "📱 Sending notification..."
        python -c "
        import requests
        import os
        
        bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        chat_id = os.getenv('TELEGRAM_CHAT_ID')
        
        message = '🤖 Automated Collection Complete! Your new bookmarks have been collected and processed.'
        
        url = f'https://api.telegram.org/bot{bot_token}/sendMessage'
        data = {'chat_id': chat_id, 'text': message}
        
        try:
            response = requests.post(url, data=data)
            if response.status_code == 200:
                print('✅ Telegram notification sent!')
            else:
                print(f'❌ Failed to send notification: {response.status_code}')
        except Exception as e:
            print(f'❌ Error sending notification: {e}')
        "